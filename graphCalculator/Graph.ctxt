#BlueJ class context
comment0.target=Graph
comment1.params=vertices\ edges
comment1.target=Graph(java.lang.String[],\ java.lang.String[][])
comment10.params=g
comment10.target=boolean\ equals(java.lang.Object)
comment11.params=
comment11.target=java.lang.String\ toString()
comment12.params=
comment12.target=void\ createAdjacencyMatrix()
comment13.params=
comment13.target=void\ startAdjacencyMatrix()
comment14.params=a\ b
comment14.target=boolean\ verifyVertexExist(java.lang.String,\ java.lang.String)
comment15.params=a\ b
comment15.target=void\ addEdge(java.lang.String,\ java.lang.String)
comment16.params=vertex
comment16.target=void\ reorganizeVertexGraph(java.util.ArrayList)
comment17.params=aristas
comment17.target=void\ reorganizeEdges(java.util.ArrayList)
comment18.params=one\ two
comment18.target=int\ compare(java.util.ArrayList,\ java.util.ArrayList)
comment19.params=
comment19.target=void\ upperCase()
comment2.params=vertices\ edges
comment2.target=Graph(java.util.ArrayList,\ java.util.ArrayList)
comment20.params=
comment20.target=void\ removeDuplicates()
comment3.params=vertex
comment3.target=boolean\ contains(java.lang.String)
comment3.text=\r\n\ Determine\ if\ a\ vertex\ is\ in\ the\ graph\r\n
comment4.params=start\ end
comment4.target=Graph\ path(java.lang.String,\ java.lang.String)
comment4.text=\r\n\ Determine\ path\ of\ a\ graph\ given\ a\ start\ to\ end\r\n\ @param\ String\ start\r\n\ @param\ String\ end\r\n
comment5.params=g
comment5.target=Graph\ union(Graph)
comment5.text=\r\n\ Calculate\ the\ union\ of\ graphs\r\n\ @param\ Graph\ g\r\n
comment6.params=g
comment6.target=Graph\ intersection(Graph)
comment6.text=\r\n\ Calculate\ the\ intersection\ of\ graphs\r\n\ @param\ Graph\ g\r\n
comment7.params=
comment7.target=int\ vertices()
comment7.text=\r\n\ Calculates\ the\ amount\ of\ vertices\ in\ a\ graph\r\n
comment8.params=
comment8.target=int\ edges()
comment8.text=\r\n\ Calculates\ the\ amount\ of\ edges\ in\ a\ graph\r\n
comment9.params=g
comment9.target=boolean\ equals(Graph)
numComments=21
