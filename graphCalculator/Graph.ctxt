#BlueJ class context
comment0.target=Graph
comment1.params=g
comment1.target=Graph(Graph)
comment10.params=g
comment10.target=Graph\ difference(Graph)
comment10.text=\r\n\ Calculate\ the\ difference\ of\ graphs\r\n\ @param\ Graph\ g\r\n
comment11.params=cloone\ clooneEdges
comment11.target=java.util.ArrayList\ removeEdgesRelational(java.util.ArrayList,\ java.util.ArrayList)
comment12.params=g
comment12.target=Graph\ join(Graph)
comment12.text=\r\n\ Calculate\ the\ join\ of\ graphs\r\n\ @param\ Graph\ g\r\n
comment13.params=g
comment13.target=Graph\ removeDuplicateGraph2(Graph)
comment14.params=
comment14.target=int\ vertices()
comment14.text=\r\n\ Calculates\ the\ amount\ of\ vertices\ in\ a\ graph\r\n
comment15.params=
comment15.target=int\ edges()
comment15.text=\r\n\ Calculates\ the\ amount\ of\ edges\ in\ a\ graph\r\n
comment16.params=g
comment16.target=boolean\ equals(Graph)
comment17.params=g
comment17.target=boolean\ equals(java.lang.Object)
comment18.params=
comment18.target=java.lang.String\ toString()
comment19.params=
comment19.target=void\ createAdjacencyMatrix()
comment2.params=
comment2.target=Graph()
comment20.params=
comment20.target=void\ startAdjacencyMatrix()
comment21.params=a\ b
comment21.target=boolean\ verifyVertexExist(java.lang.String,\ java.lang.String)
comment21.text=\r\n\ Checking\ if\ vertex\ exist\r\n\ @param\ String\ a\r\n\ @param\ String\ b\r\n
comment22.params=a\ b
comment22.target=void\ addEdge(java.lang.String,\ java.lang.String)
comment22.text=\r\n\ add\ edges\ to\ the\ graph\r\n\ @param\ String\ a\r\n\ @param\ String\ b\r\n
comment23.params=a\ b
comment23.target=void\ removeEdge(java.lang.String,\ java.lang.String)
comment23.text=\r\n\ remove\ edges\ of\ the\ graph\r\n\ @param\ String\ a\r\n\ @param\ String\ b\r\n
comment24.params=vertices
comment24.target=void\ addVertices(java.lang.String[])
comment24.text=\r\n\ add\ vertices\ to\ the\ graph\r\n\ @param\ String[]\ vertices\r\n
comment25.params=vertex
comment25.target=void\ reorganizeVertexGraph(java.util.ArrayList)
comment26.params=aristas
comment26.target=void\ reorganizeEdges(java.util.ArrayList)
comment27.params=one\ two
comment27.target=int\ compare(java.util.ArrayList,\ java.util.ArrayList)
comment28.params=
comment28.target=void\ upperCase()
comment29.params=
comment29.target=void\ removeDuplicates()
comment3.params=vertices\ edges
comment3.target=Graph(java.lang.String[],\ java.lang.String[][])
comment30.params=
comment30.target=java.lang.String[]\ getVertexGraph()
comment31.params=
comment31.target=java.lang.String[][]\ getAristas()
comment4.params=vertices\ edges
comment4.target=Graph(java.util.ArrayList,\ java.util.ArrayList)
comment5.params=vertex
comment5.target=boolean\ contains(java.lang.String)
comment5.text=\r\n\ Determine\ if\ a\ vertex\ is\ in\ the\ graph\r\n
comment6.params=start\ end
comment6.target=Graph\ path(java.lang.String,\ java.lang.String)
comment6.text=\r\n\ Determine\ path\ of\ a\ graph\ given\ a\ start\ to\ end\r\n\ @param\ String\ start\r\n\ @param\ String\ end\r\n
comment7.params=start\ end\ vertex
comment7.target=Graph\ path(java.lang.String,\ java.lang.String,\ java.lang.String[])
comment7.text=\r\n\ \r\n
comment8.params=g
comment8.target=Graph\ union(Graph)
comment8.text=\r\n\ Calculate\ the\ union\ of\ graphs\r\n\ @param\ Graph\ g\r\n
comment9.params=g
comment9.target=Graph\ intersection(Graph)
comment9.text=\r\n\ Calculate\ the\ intersection\ of\ graphs\r\n\ @param\ Graph\ g\r\n
numComments=32
